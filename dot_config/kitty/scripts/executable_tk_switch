#!/bin/bash

# 调试函数
debug() {
    # 同时输出到日志文件（可选）
    echo "[DEBUG] $1" >> ~/.config/kitty/scripts/tk_switch.log
    echo "[DEBUG] $1"
}

# 添加调试信息
debug "Debug: 脚本开始执行" 
debug "Debug: TMUX='${TMUX}'" 
debug "Debug: TERM='${TERM}'" 
debug "Debug: PPID='${PPID}'" 
debug "Debug: 父进程命令: '$(ps -p $PPID -o command=)'" 

# TMUX_SCRIPTS="$HOME/.config/kitty/scripts" 
source ~/.bashrc 2>/dev/null || source ~/.zshrc 2>/dev/null

# 添加函数来获取 kitty socket 文件
get_kitty_socket() {
    # 查找所有 kitty socket 文件
    local socket_files=(/tmp/kitty-*)
    if [ -e "${socket_files[0]}" ]; then
        echo "${socket_files[0]}"
        return 0
    fi
    return 1
}


is_in_tmux() {
    debug "开始检测 tmux 状态"
    debug "KITTY_WINDOW_ID: '${KITTY_WINDOW_ID}'"
    
    # 获取当前 shell 的会话 ID
    local shell_sid=$(ps -o sid= $$)
    debug "当前 shell SID: $shell_sid"
    
    # 检查会话中是否有 tmux
    local session_info=$(ps -o pid,command -s $shell_sid)
    debug "会话信息: $session_info"
    
    if [[ "$session_info" == *"tmux"* ]]; then
        debug "检测到 tmux 进程，返回 0"
        return 0
    fi
    
    # 检查是否在 kitty 会话中
    if [[ -n "$KITTY_WINDOW_ID" ]]; then
        debug "检测到 KITTY_WINDOW_ID，返回 1"
        return 1
    fi
    debug "未检测到 tmux 或 kitty 环境，返回 2"
    return 2
}

# 运行 kitty 的 run_action.py 脚本，来执行按键映射
kitty_run_action() {
  kitty @ kitten run_action.py "$@"
}

# 创建分屏的函数
# 分别在 tmux 和 kitty 中实现，水平和垂直两种方向
# 在 tmux 中，创建一个水平分屏，并保持当前路径
tmux_hsplit() {
    tmux split-window -h -c "#{pane_current_path}"
}

# 在 tmux 中，创建一个垂直分屏，并保持当前路径
tmux_vsplit() {
    tmux split-window -v -c "#{pane_current_path}"
}

# 在 kitty 中，创建一个水平分屏，并保持当前路径
kitty_hsplit() {
    kitty @ launch --cwd=current --location=vsplit
}

# 在 kitty 中，创建一个垂直分屏，并保持当前路径
kitty_vsplit() {
    kitty @ launch --cwd=current --location=hsplit
}

# 切换窗口
# 分别在 tmux 和 kitty 中实现，上下左右四个方向
kitty_window_up() {
    kitty_run_action "neighboring_window up"
}

tmux_window_up() {
    tmux select-pane -U
}



main() {
  local cmd="$1"
  shift 1

  local func="kitty_${cmd}"
  is_in_tmux
  local in_tmux=$?

  debug "in_tmux: $in_tmux"
  if [[ $in_tmux -eq 0 ]]; then
    func="tmux_${cmd}"
  fi
  eval "$func $*"
}

main "$@"
